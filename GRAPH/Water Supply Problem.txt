// C++ program to solve water  
// supply problem using BFS 
  
#include <iostream> 
#include <vector> 
#include <queue> 
using namespace std; 
  
// Function to perform BFS 
int bfsUtil(int v[], bool vis[], vector<int> adj[],  
                                            int src) 
{ 
    // Mark current source visited 
    vis[src] = true; 
      
    queue<int> q; //Queue for BFS 
    q.push(src); // Push src to queue 
      
    int count = 0; 
    while (!q.empty()) { 
          
        int p = q.front(); 
          
        for (int i = 0; i < adj[p].size(); i++) { 
              
            // When the adjacent city not visited and  
            // not blocked, push city in the queue. 
            if (!vis[adj[p][i]] && v[adj[p][i]] == 0) { 
                count++; 
                vis[adj[p][i]] = true; 
                q.push(adj[p][i]); 
            } 
              
            // when the adjacent city is not visited  
            // but blocked so the blocked city is 
            // not pushed in queue 
            else if (!vis[adj[p][i]] && v[adj[p][i]] == 1) { 
                count++; 
            } 
        } 
        q.pop(); 
    } 
      
    return count + 1; 
} 
  
// Utility function to perform BFS 
int bfs(int N, int v[], vector<int> adj[]) 
{ 
    bool vis[N + 1]; 
    int max = 1, res; 
      
    // marking visited array false 
    for (int i = 1; i <= N; i++) 
        vis[i] = false; 
          
    // Check for each and every city 
    for (int i = 1; i <= N; i++) { 
        // Checks that city is not blocked 
        // and not visited. 
        if (v[i] == 0 && !vis[i]) { 
            res = bfsUtil(v, vis, adj, i); 
            if (res > max) { 
                max = res; 
            } 
        } 
    } 
      
    return max; 
} 
  
// Driver Code 
int main() 
{ 
    int N = 4; // Denotes the number of cities 
    vector<int> adj[N + 1]; 
    int v[N + 1]; 
  
    // Adjacency list denoting road 
    // between city u and v 
    adj[1].push_back(2); 
    adj[2].push_back(1); 
    adj[2].push_back(3); 
    adj[3].push_back(2); 
    adj[3].push_back(4); 
    adj[4].push_back(3); 
  
    // array for storing whether ith 
    // city is blocked or not 
    v[1] = 0; 
    v[2] = 1; 
    v[3] = 1; 
    v[4] = 0; 
      
    cout<<bfs(N, v, adj); 
      
    return 0; 
} 
