class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
         int sum=accumulate(nums.begin(),nums.end(),0);
        if(sum<target || (sum+target)%2==1)
                return 0;
        if(sum==0 && target==0)
            return pow(2,nums.size());
        int count0=0;
        for(int i=0;i<nums.size();i++)
            if(nums[i]==0)
                count0++;
        int m=(sum+target)/2;
        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<n+1;i++)
            dp[i][0]=1;
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(nums[i-1]<=j && nums[i-1]!=0)
                    dp[i][j]=dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][m]*pow(2,count0);
    }
};

